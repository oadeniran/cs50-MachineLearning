if (1, 1) in poss_actions:
        return(1, 1)

    # Diagonal block/win
    for option in [curr, opp]:
        if board[0][0] == option and board[1][1] == option and board[2][2] == EMPTY:
            return (2, 2)
        elif board[0][0] == EMPTY and board[1][1] == option and board[2][2] == option:
            return (0, 0)
        elif board[0][0] == option and board[1][1] == EMPTY and board[2][2] == option:
            return (1, 1)
        elif board[0][2] == option and board[1][1] == option and board[2][0] == EMPTY:
            return (2, 0)
        elif board[0][2] == option and board[1][1] == EMPTY and board[2][0] == option:
            return (1, 1)
        elif board[0][2] == EMPTY and board[1][1] == option and board[2][0] == option:
            return (0, 2)
    
        rec = []
        for j in range(3):
            for k  in range(3):
                rec.append(board[j][k])
            #print(rec)
            if rec[0] == option and rec[1] == option and rec[2] == EMPTY:
                return (j, k)
            elif rec[0] == option and rec[1] == EMPTY and rec[2] == option:
                return (j, 1)
            elif rec[0] == EMPTY and rec[1] == option and rec[2] == option:
                return (j, 0)
            else:
                rec = []
        
        rec2 = []
        for m in range(3):
            for n  in range(3):
                rec2.append(board[n][m])
            #print(rec)
            if rec2[0] == option and rec2[1] == option and rec2[2] == EMPTY:
                return (2, m)
            elif rec2[0] == option and rec2[1] == EMPTY and rec2[2] == option:
                return (1, m)
            elif rec2[0] == EMPTY and rec2[1] == option and rec2[2] == option:
                return (0, m)
            else:
                rec2 = []
    
    return random.choice(poss_actions)

    if curr == X:
        value, move = Max_value(board)
        return move
    else:
        value, move = Min_value(board)
        return move